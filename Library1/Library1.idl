// Library1.IDL
import "inspectable.idl";
import "Windows.Foundation.idl";

#define COMPONENT_VERSION 1.0

namespace Library1
{
	interface IMyData;
	declare
	{
		interface Windows.Foundation.Collections.IObservableVector<HSTRING>;
		interface Windows.Foundation.Collections.IObservableVector<int>;
		interface Windows.Foundation.Collections.IObservableVector<IMyData *>;
	}
}

namespace Library1
{
	interface ILogger;
	runtimeclass Logger;


    [version(COMPONENT_VERSION)]
    typedef enum ac_line_status
    {
        AC_LINE_OFFLINE = 0x00,
        AC_LINE_ONLINE = 0x01,
        AC_LINE_BACKUP_POWER = 0x02,
        AC_LINE_UNKNOWN = 0xFF,
    } AC_LINE_STATUS;

    [version(COMPONENT_VERSION)]
    typedef enum battery_flag
    {
        BATTERY_FLAG_HIGH = 0x01,
        BATTERY_FLAG_LOW = 0x02,
        BATTERY_FLAG_CRITICAL = 0x04,
        BATTERY_FLAG_CHARGING = 0x08,
        BATTERY_FLAG_NO_BATTERY = 0x80,
        BATTERY_FLAG_UNKNOWN = 0xFF,
    } BATTERY_FLAG;
    

	[uuid(1FCD374B-2C3C-49E3-93A7-6FB801080D45), version(COMPONENT_VERSION)]
	delegate HRESULT LoggerEventHandler([in] HSTRING e);

	[uuid(3EC4B4D6-14A6-4D0D-BB96-31DA25224A15), version(COMPONENT_VERSION)]
	interface ILogger : IInspectable
	{
		[propget] HRESULT Name([out, retval] HSTRING* value);
		[propput] HRESULT Name([in] HSTRING value);
		HRESULT LogInfo([in] HSTRING value);
		HRESULT GetInt32([out] int * pValue);
		[eventadd] HRESULT LoggerChanged([in] LoggerEventHandler* handler, [out][retval] EventRegistrationToken* token);
		[eventremove] HRESULT LoggerChanged([in] EventRegistrationToken token);
	}

	[version(COMPONENT_VERSION), activatable(COMPONENT_VERSION)]
	runtimeclass Logger
	{
		[default] interface ILogger;
	}

	declare
	{
		interface Windows.Foundation.IAsyncOperation<ILogger*>;
	}

	interface IMyData;
	runtimeclass MyData;

	[uuid(3EC5B5D7-14A6-4D0D-BB96-31DA25224A16), version(COMPONENT_VERSION)]
	interface IMyData : IInspectable
	{
		[propget] HRESULT Name([out, retval] HSTRING* value);
		[propput] HRESULT Name([in] HSTRING value);
		[propget] HRESULT Age([out, retval] int* value);
		[propput] HRESULT Age([in] int value);
	}

	[version(COMPONENT_VERSION), activatable(COMPONENT_VERSION)]
	runtimeclass MyData
	{
		[default] interface IMyData;
	}

	interface IRoot;
	runtimeclass Root;

	[uuid(3EC4B4D6-14A6-4D0D-BB96-31DA25224A16), version(COMPONENT_VERSION), exclusiveto(Root)]
	interface IRoot : IInspectable
	{
		HRESULT GetLoggerAsync([out][retval] Windows.Foundation.IAsyncOperation<ILogger*>** value);
		HRESULT GetVector([out][retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
		HRESULT GetVectorInt([out][retval] Windows.Foundation.Collections.IVector<int>** value);
		HRESULT GetVectorData([out][retval] Windows.Foundation.Collections.IVector<IMyData *>** value);

        [propget] HRESULT ACLineStatus([out, retval] AC_LINE_STATUS* value);
        [propget] HRESULT BatteryFlag([out, retval] BATTERY_FLAG* value);
        [propget] HRESULT BatteryLifePercent([out, retval] int* value);
        [propget] HRESULT BatteryLifeTime([out, retval] int* value);
        [propget] HRESULT BatteryFullLifeTime([out, retval] int* value);
	}

	[version(COMPONENT_VERSION), activatable(COMPONENT_VERSION)]
	runtimeclass Root
	{
		[default] interface IRoot;
	}
}
